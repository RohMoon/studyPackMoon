# Java1
## 1. Abstraction
- 추상화는 공통적인 특징을 찾아 이름과 의미를 부여하는 사고 활동으로 표현력을 극대화 할 수 있다.  
- 추상화는 객체 지향 주요 개념 중에 하나로 사용자에게 불필요한 세부 내용을 숨겨 복잡성을 최소화 시킬 수 있다.
- 추상화의 범주에는 상속(inheritance), 다형성(polymorphism), 재정의(overriding) 등이 있다.

## 2. Inheritance
- 상속이란 이미 존재하는 클래스를 물려받아 새로운 클래스를 만드는 기법이다.
- extends를 사용하여 기존 클래스를 상속한다.
- Object 클래스는 Java 최상위 클래스로 모든 Java 클래스는 Object 클래스를 상속한다.
- Java는 다중 상속을 지원하지 않는다.
--------
 Parent를 상속 받는 Child 클래스를 만들고 c를 추가한 후 a,b,c를 출력해보자.  

-------
## 3. Overriding
- 오버 로딩(overloading)은 하나의 클래스에서 메서드 명이 같고, 메서드 파라미터를 달리하는 것을 뜻한다.
- 오버 라이딩(overriding)은 부모 클래스로 부터 상속 받은 메서드를 동일한 시그니처로 새롭게 정의하는 것을 뜻한다.
- 오버라이딩은 메서드 시그니처 (메서드명, 파라미터)를 같게 정의한다.
- 상속 받은 메서드를 재정의 할 때 접근지정자는 같거나 넓은 범위로 정의할 수 있다.
------------------------------------------
Parent를 상속받는 Child 클래스를 만들고 display() 의 내용을 바꾼 후 display()

-----------------------------------------
## 4. Object Casting
- Java는 기본 데이터 타입(primitive type)에 대해 Strongly typed가 적용된 언어입니다.
따라서, 타입에 대한 연산이 이루어질 때 대상이 되는 피연산 대상들은 동일한 타입으로 정의 되어야 합니다.
하지만, 객체 대상의 대입 연산에서 상속 관계일 때 예외 사항을 두었습니다.
상속 관계에서 자식 타입의 객체가 부모 타입의 레퍼런스로 참조가 가능한 것이 예외적 연산입니다.
-----------------------------------------
class Parent{ .. }
class Child extentds Parent{ .. }
Parent parent = new Child()
Child child = (Child)parent;
Child child = new Parent();

위와 같이 컴파일하여 어떤 결과가 나오는지 확인해보자.

----------------------------------------
## 5. Polymorphism
- 다형성은 동일한 이름의 메서드 호출에 서로 다른 기능을 수행하는 것을 뜻한다. (ex:toString() 메서드)
- 상속 관계가 구성 되어 있고, 자식 클래스가 메서드를 재정의 하고 있다면 다형성 구현이 가능하다.
- 다형성의 두 가지 구현 형태는 이형 집합에 의한 구현, 파라미터를 통한 다형성 구현 입니다.
- --------------------------------------
## 6. Abstract Class, Abstract method
- 추상 클래스 (abstract Class)는 인스턴스 객체를 생성할 수 없는 부모 클래스의 역할만 갖는 클래스 입니다.
- abstract 키워드를 이용해 추상 클래스를 정의합니다.
- 하나 이상의 추상 메소드 (abstract method)를 갖는 클래스는 반드시 추상 클래스로 정의되어야 한다.
- 추상 메소드를 갖는 추상 클래스를 상속한 자식 클래스는 상속받은 추상 메소드를 재정의 하거나 추상 클래스가 되어야 한다.

----------------------------------------
abstract class animal{}
class cat extends Animal{}
class dog extends Animal{}

--------------------------------
## 7. interface
- 인터페이스는 interface 키워드를 이용해 정의하며 추상 메소드로 이루어진다.
- java는 다중 상속을 지원하지 않아 하나의 부모 클래스만 가질 수 있지만 인터페이스는 다수의 조합이 가능하다.
- 인터페이스를 활용하면 설계와 구현을 분리 할 수 있다.
- 인터페이스에 선언된 필드는 기본적으로 public static final 형태를 갖는다.

|구분|클래스|추상클래스|인터페이스|
|---|-----|--------|--------|
|예약어|class|abstract|interface|
추상 메소드 포함 여부 |포함 불가| 포함 가능|포함 가능 (필수)|
일반 메소드 |포함 가능 |포함 가능|포함 불가|
static 메소드 선언 여부 | 선언 가능| 선언 가능|선언 불가|
final 메소드 선언 여부 | 선언 가능 |선언 가능| 선언 불가|
상속 가능 여부| 상속 가능| 상속 가능|상속 불가|
구현 가능 여부| 구현 불가| 구현 불가| 구현 가능|
