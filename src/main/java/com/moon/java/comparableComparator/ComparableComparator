## [JAVA] Comparable과 Comparator 의 이해

### Comparable / Comparator

- Comparable과 Comparator와 '비교'의 연관성 및 필요성에 대해 알아본 뒤, Comparable과 Comparator를 각각 알아보자.
- Comparator 익명 객체에 대해서 알아보고 최종적으로 Comparable, Comparator와 '정렬'의 관계에 대해서이다.
- <b style="color:orange"> Comparable과 Comparator는 모두 인터페이스</b>이다. <br>Comparable 혹은 Comparator를 사용하고자 한다면 인터페이스 내에 선언된 메서드를 반드시 `구현`해야 한다.</br></br>
- [Comparable Official API](docs.oracle.com/javase/8/docs/api/java/lang/Comparable.html#method.summary)
    - Comparable 인터페이스에는 compareTo( T o ) 메서드 하나 선언되어 있다.<br>
      Comparable을 사용하려한다면 compareTo 메서드를 재정의(Override/ 구현)해주어야한다.<br><br>
- [Comparator](docs.oracle.com/javase/8/docs/api/java/util/Comparator.html#method.summary)
    - Comparator의 경우 선언되어 있는 메서드가 많지만 , 실질적을 구현해야하는 것은 compare(T o1, T o2)다.
  > 인터페이스 내부에 선언된 메서드를 '반드시 구현' 해야한다고 말햇는데, 왜 compare메서드만 구현 하는가?  
  > <br>
  > 원래 interface는 함수의 껍데기만 있는 클래스라고 보면 된다.
  > 예로 자동차를 설계한다고 가정할 때, "자동차 "라는 것 자체는 추상적인 개념이다.
  > <br>
  > 대게 자동차라고 하면 바퀴4개, 핸들과 기어가 있는 동력 물체라는 개념이 존재한다 . 이러한 추상적 개념을 interface라고 보면 된다.
  > 이러한 개념을 구체화, 즉 구현을 하여 핸들은 어떤 모양으로 할것인가 바퀴는 어느 크기, 어느 위치에 둘 것인지 구체적으로 만들어 k7,람보르기니 350gt 등 하나의 제품이 만들어진다.
  > <br><br>
  > 이것을 class라고 보면 된다.
  > 즉, interface에 선언된 메서드 (바퀴,핸들,시어,동력 장치)들이 있고, 이 인터페이스를 구현하는 클래스는 인터페이스에 선언된 메서드(바퀴,핸들,기어,동력장치)를 반드시 구체화 하도록 강제하고 있다는 것이다.  
  > 그리고 이를 오버라이드(Override) 재정의라고 부른다.<br><br>
  > 그래서 Interface 파일의 경우 메서드(함ㅅ)를 선언만 해놓을 뿐 함수의 내용은 구체화 하지 않는다. 이를 흔히 추상메서드라고 한다.<br><br>
  > ```java
   > interface Car {
   >   void setHandle();
   >   void setWheel();
   >   int  gear();
   > // ... /// 
   > } 
   > ```
  > 이런식이다.
  > Car 인터페이스를 구현하고자 한다면 다음과 같다.
  > ```java
   > class GT350 implements Car {
   > //...//
   > @Override
   > void handleint  (int size) {
   >  handleSize = size;
   > }
   > 
   > @Override
   > void setWheel() {
   > wheelCount = 4;
   > }
   > @Override
   > int gear(){
   >    return nowGear;}
   > // ...//
   > }
   >```
  > 이런식으로 '반드시 구현' 해주어야 한다.
  > 그러나 Java8부터는 Interface에서도 일반 메서드(함수)를 구현할 수 있도록 변경되었다.
  > 대부분이 default로 선언된 메서드나, static 으로 선언된 메서드인 것을 볼 수 있다.
  > 그리고 default나 static으로 선언된 메서드들을 보면 함수를 구현하고 있다.
  > ![img.png](img.png)
  > 그림에서 처럼 기존 구현된 함수를 반환하는등, 함수의 내용이 { .. } 블럭 안에 구현이 되어 있는것을 볼 수 있다.<br>
  > 이 말은, default나 static으로 선언된 메서드가 아니면 이는 추상메서드라는 의미로 반드시 재정의를 해주어야 한다.
  > 여담으로 default 와 static의 차이라면 default로 선언된 메서드는 Override할 수 있고, static은 재정의를 할 수 없다는 차이이다.
  > (참고로 bool equals(Object obj) 메서드는 default나 static이 안붙어있음에도 구현이 강제되지 않는 이유는 모든 객체의 최상위 타입(객체)인 Object 클래스에서 정의되어 있기 때문이다.)
- Comparable, Comparator 이 두 인터페이스는 무엇을 하는지부터 생각해보자.
    - 보통 많은 사람들의 경우 객체를 정렬을 하기 위해 쓴다고 하지만, 정확히 말하자면 그건 용도에 불과하다.
    - <b style="color:Orange">"객체를 비교할 수 있도록 만든다"가 핵심이다."</b><br>
      왜 객체를 비교할 수 있도록 한다는 걸까? 생각해보면 우리는 primitive 타입의 실수 변수 (byte, int, double 등등...)의 경우 부등호를 갖고 쉽게 두 변수를 비교할 수 있었다.
      ```java
      public class Test{ int a = 1; int b = 2; if(a > b){ System.out.print("a가 b보다 크다."); } else if (a == b ){
      System.out.println("a와 v는 같습니다."); } else { System.out.println("b가 a보다 크다."); }

      }
      ``` 
          이런식으로 primitive type은 자바 자체에서 제공되기에 별다른 처리 없이 비교가 가능하다.<bR>
          즉, 기본 자료형이기 때문에 부등호로 쉽게 비교가 가능하다.
        - 하지만, 새로운 클래스 객체를 만들어 비교하고자 한다면 어떻게 해야할까 ? 예로 학생의 나이와 학급 정보를 갖고 있는 클래스를 만든다고 가정하면.
      ```java
         public class Test{
        public static void main(String[] args){
          Student a = new Student(17,2); // 17살 2반
          Student b= new Student (18,1); // 18살 1반
      
      /*
      어떻게 비교 ..? 
      if (a >b) ... ? 
      */
        }
      }
      class Student {
        int age;  //나이
        int classNumber; //학급
        
      Student (int age, int classNumber){
      this.age = age;
      this.classNumber = classNumber;
      }
      }
      ```
      a학생과 b 학생 두 객체를 생성했다. 그럼 두 객체(a,b )를 어떻게 비교할 것인가? 부등호로 비교하려 하면, 나이(age)를 기준으로 비교되는 건가? 아니면 학급(classNumber)을 기준으로
      비교되는 건가?<br><br>
      이 부분이 포인트이다. 본질적으로 객체는 사용자가 기준을 정해주지 않는 이상 어떤 객체가 더 높은 우선순위를 갖는지 판단할 수가 없다.<br>
      그래서 이러한 문제점을 해결하기 위해 바로 Comparabe 또는 Comparator가 쓰인다는 것이다.<bR><br>
      왜 '객체'를 비교할 수 있도록 해준다는 것인지 개념이 잡힌다.<br><br>
      그러면 Comparable과 Comparator 의 역할은 비슷한데 무슨 차이인가? <br>
      왜 Comparable의 compareTo(T o) 메서드는 파라미터 (매개변수)가 한 개이고, Comparator의 compare(T o1, T o2)메서드는 파라미터가 두 개인가?<br><br><br>
      일단, 두 인터페이스를 구체적으로 알아보기에 앞서 먼저 정답부터 말한다면,
        - Comparable 은 <b>"자기 자신과 매개변수 객체를 비교 "</b>
            - 자기 자신과 파라미터로 들어오는 객체를 비교하는 것.
        - Comparator는 <b>"두 매개변수 객체를 비교"</B>
            - 자기 자신의 상태가 어떻던 상관없이 파라미터로 들어오는 두 객체를 비교한는 것.<br><br>
    - 본질 적으로 비교한다는 것 자체는 같지만, 비교 대상이 다르다.
    - Comparable은 lang 패키지에 있기 때문에 import할 필요가 없지만, Comparator는 util 패키지에 있다.<br><br><br>
- Comparable
    - Comparable은 무엇이라고 했는가?  
      "자기 자신과 매개변수 객체를 비교"한다고 했다.
    - 일단, Comparable 인터페이스는 어떻게 정의되어 있는지 보자.
    - ![img_1.png](img_1.png)<br>
      interface Comparable<t> {...} 라고 되어있다. (만약 T가 무슨 말인지 모른다면 제너릭에 대한 이해가 없다는 것이다.)<bR>
      쉽게 이야기 하자면, <T>는 하나의 객체 타입이 지정될 자리라고 생각하면 된다.
    - ```java
      public class ClassName implements Comparable<Type>{
  /*
  ... Code ...
  */ // 필수 구현 부분 @Override public int compareTo(type o){ /*
  비교 구현
  */ } }
    ```
      이 때, 필수 구현 부분인 compareTo() 메서드가 바로 우리가 객체를 비교할 기준을 정의해주는 부분이다.<br>
      쉽게 생각하면 이렇다. 여러분이 클래스를 만들 때, ClassName을 비교하고 싶을 것이다.  
      아까 Comparable은 자기 자신과 매개변수 객체를 비교한다고 했다. 즉, 자기자신은 ClassName으로 생성한 객체 자신이 되고, 매개변수 객체는 ClassName.compareTo(o);를 통해
      들어온 파라미터 o가 비교 할 객체가 되는 것이다.<br><br><br>
    - 예로 Student클래스를 비교하고자 했으니 이를 위 방법에 맞게 적용하려면 어떻게 해야할까?
        - 일단 Student 클래스에 Comprable을 implement해야한다. 그리고< > 사이에들어갈 타입은 무엇일까? <b>Stduent 객체와 또 다른 Stduent객체를 비교</b>하고
          싶다면, < > 사이에 들어갈 타입 또한 Student가 되어야 하지 않을까?
          <br> 즉 Type은 Student로 바뀌게 된다.
        - ```java
      class Student implements Comparable<Student>{
      int age; // 나이
      int classNumber; // 학급
      
      Student(int age, int classNumber){
      this.age = age;
      this.classNumber = classNumber;}
      
      @Override
      public int compareTo (Student o){
         /*
         * 비교 구현
         */
         }
      }
      ```
          <br><br>이제 compareTo 메서드를 구현해야 한다. 만약 나이를 기준으로 비교(대소 관계)를 하고자한다면 어떻게 해야할까?<br>
          자기 자신의 age(나이)와 매개변수로 들어온 o의 age(나이) 값을 비교하면 된다.<br><br><br>
        - ```java
      class Student implements Compareable<Student>{
       int age; //나이
       int classNumber; // 학급
      
      Student (int age, int classNumber){
      this.age = age;
      this.classNumber = classNumber;
      } 
      
      @Override
      public int compareTo(Student o){
        //자기 자신의 age가 o의 age보다 크다면 양수
         if(this.age > o.age){
      return 1;         
      }
      //자기 자신의 age와 o의 age가 같다면 0
      else if(this.age == o.age){
      return 0;
            }
       //자기 자신의 age가 o의 age보다 작다면 음수
       else{
       return -1;
      }
      }}
      ```
          compareTo 메서드를 보면 int값을 반환하도록 되어있다. <br>
          즉, 쉽게 말해 우리는 <b>'값'을 비교해서 정수를 반환</b>해야 한다는 것이다. 그럼 이러한 의문이 나올 것이다. 무슨 기준으로 양수, 0, 음수를 반환하는 것이냐고.  
          우리는 "자기 자신"과 " 상대방"을 비교하는 것이다. 즉, 자기 자신을 기준으로 삼아 대소 관계를 파악해야 한다.<br>
          만약 내가 갖고 있는 값이 7이라고 가정해보자, 그리고 상대방은 3이라고 가정한다면, 나 자신은 상대방보다 값이 4만큼 크다. 반대로 상대방이 9를 갖고 있다면, 나는 2만큼 작다, 즉 -2만큼
          크다는 것이다.
    - 한 마디로 자기 자신을 기준으로 상대방과의 차이가 얼마나 나느냐다.
        - 이미지를 보면 아래와 같다.
        - ![img_2.png](img_2.png)
        - 그래서 필자가 위 코드에서 1, 0 , -1을 반환했지만, 주석으로 '양수','음수'라고 표현한 것도 이 때문이다.
        - 사실 조건문을 통해 <,>,== 을 활용하여 대소비교를 하고 그에 따라 1, 0 , -1을 반환하는 방식이 이해하기도 쉬울테고 가장 정석적인 방법이다.
        - ```java
      class Student implements Compareable<Student>{
      int age; //나이
      int classNumber; // 학급

      Student (int age, int classNumber){
      this.age = age;
      this.classNumber = classNumber;
      }

      @Override
      public int compareTo(Student o){
      //자기 자신의 age가 o의 age보다 크다면 양수
      if(this.age > o.age){
      return 11234123;         
      }
      //자기 자신의 age와 o의 age가 같다면 0
      else if(this.age == o.age){
      return 0;
      }
      //자기 자신의 age가 o의 age보다 작다면 음수
      else{
      return -1123124;
      }
      }}
      ```
          이렇게해도 크게 문제되진 않는다.<br><br>
          하지만 당연히 이런 방법은 특수한 경우가 아니라면 추전되지 않는다.<br><br>
          그렇기에 좀 더 일관되게 비교하기 위해서 더욱 간략하면서도 쌈박하게 비교할 수 있는 방법이 있다.<br><br>
          다시 복기해보자면, Comparable의 ComapreTo는 자기 자신과 매개변수를 비교한다고 했고, compareTo는 정수를 반환하며,<br>
          <b style="color:orange">자기 자신을 기준으로 상대방과의 차이 값을 비교하여 반환</b> 한다고 했다.<br>
          이를 좀 더 생각해보면 -1, 0 , 1로 반환할 수도 있으니, 그냥 두 비교대상의 값 차이를 반환해도 되지 않겠는가?
        - ```java
      class Student implements Compareable<Student>{
      int age; //나이
      int classNumber; // 학급

      Student (int age, int classNumber){
      this.age = age;
      this.classNumber = classNumber;
      }

      @Override
      public int compareTo(Student o){
      
      /*
      * 만약 자신의 age가 o의 age보다 크다면 양수가 반환 될 것이고,
      * 같다면 0을, 작다면 음수를 반환할 것이다.
      */
      
      return this.age - o.age;
      }
      }
      ```
          위와 같이 두 값의 차를 반환해버리면 번거로운 조건식 없이 한방에 3개의 조건을 만족할 수 있다.  
          매우 깔끔하면서도 편리하다.
        - <b style="color:red">주의점이 있다.</b>
            - 사실 편리하게 두 수의 대소비교를 두 수의 차를 통해 0, 양수로 구분하여 구했지만, 여기에는 치명적인 단점이 있다.<br>
              바로 뺄셈 과정에서 자료형의 범위를 넘어버리는 경우가 발생할 수 있다.<br><br>
              예시에서 int를 사용했으니 int를 예로 들자면 먼저 int형의 범위가 어떤지를 파악해야 한다.<br>
              int 자료형은 32비트 (4바이트) 자료형이며 표현 범위가 -2^31 ~ 2^31-1 으로, 이를 풀어쓰면 -2,147483,648 ~ 2,147,483,647 이다.<br><br><br>
              만약 해당 범위 밖을 넘게 되면 반대편의 값으로 넘어가게 된다.<br>
              쉽게 말하자면 -2,147,486,648 - 1 = -2,147,486,649 일 것이다. 하지만, int 자료형에서 표현할 수 없는 수로 2,147,486,647으로 int형의 최대값을
              반환한다.<br>
              이렇게 주어진 범위의 하한선을 넘어버리는 것을 `Underflow`라고 한다.<br><br>
              반대로 2,147,483,647 + 1 = 2,147,483,648 일 것이다. 하지만 마찬가지로 int자료형에서 표현할 수 없는 수로 -2,147,483,648이 되어 int형의 최솟값으로
              반환된다. 이렇게 주어진 범위의 상한선을 넘어버리는 것을 'OverFlow'라고 한다.<br><br>
              이것이 어떤 상황에서 문제가 되냐면, 예로 들어서 다음과 같은 두 값이 있다고 하자.<br><br>
              o1 = 1, o2 = -2,147,483,648<br><br>
              그리고 두 수를 위처럼 `return o1 - o2;` 형식으로 하면 어떻게 될까?<bR>
              '음수'가 나올 때 선행(자기 자신)원소가 후행 원소보다 판단했다. 하지만 위 연산을 자세히 보면,<br>
              1 - (-2,147,483,648) = 2,147,486,648이 되어야 하지만 -2,147,483,648 이 되어 음수값이 나와버린다. 그러면 1인 o1이 -2,147,483,648인
              o2보다 작다는 상횡이 와버린다.<br><br>
              그렇기 때문에 여러분이 compareTo를 구현하거나, 이후 설명 할 compare을 구현 할 때 대소비교에 있어 이러한 Overflow 혹은, Underflow가 발생할 여지가 있는지를
              반드시 확인하고 사용해야 한다.<br><br><br>
              특히 <b style="color:orange"> primitive 값에 대해 위와 같은 예외를 만약 확인하기 어렵다면 >,<,== 으로 대소비교를 해주는 것이 안전 </b>하며 일반적으로
              권장되는 방식이다.
        - [Comparable의 특징]
            1. 자기 자신과 매개변수를 비교한다.
            2. compareTo 메서드를 반드시 구현해야한다.

- Compartor
    - 두번째로 Comparator이다. 객체를 비교하는 것 자체가 Comparable과 비슷하면서 다르다.
    - Comparator는 " 두 매개변수 객체를 비교" 한다.<bR>
      이 말은 자기 자신이 아니라 파라미터(매개 변수)로 들어오는 두 객체를 비교하는 것이다. 여기서 바로 Comparable과 차이가 발생하는 것이다.<br><br>
      그럼 Comparator는 어떤 형식일까?
        - ![img_3.png](img_3.png)<br>
          Comparble 과 인터페이스 형식이 유사하게 interface Comparator<T> {...} 라고 되어 있다.<bR><br>
          이 부분은 Comparable에서 설명했던 것과 같이 <T>는 하나의 객체 타입이 지정될 자리라고 생각하면 된다.<bR>
          즉, 클래스를 만들 때 기본적으로 사용 방법은 이렇다.<ㅠ>

```java
import java.util.Comparator; //import필요

public class ClassName implements Comparator<Type> {
    /*
     * ...
     * code
     * ...
     */
    // 필수 구현 부분
    @Override
    public int compare(Type o1, Type o2) {
        /*
         * 비교 구현
         * */
    }
}
```

- 이 때, 필수 구현 부분인 compare() 메서드가 바로 객체를 비교할 기준을 정의해주는 부분이다.<br>
  Comparable 과 다르게 Comparator는 매개변수로 들어오는 두 객체를 비교하는 것이기 때문에 당연히 매개변수가 두 개가 되는 것이다.<br><br>
  Student로 예시를 들기 시작했기 때문에, 이번에도 마찬가지로 Stduent 타입으로 확인해보자면.

```java
import java.util.Comparator; // import 필요

public class ClassName implements Comparator<Student> {
    /*
     * ...
     * code
     * ...
     * */

    //필수 구현 부분
    @Override
    public int compare(Student o1, Student o2) {
        /*
         * 비교 구현
         * */
    }


}
```

- 그러면 이제 compare 메서드를 구현해야 할 것이다 . 이 부분은 그리 어렵지 않다.<br>
  다만, <b> 자기 자신과 비교가 되느냐 안되느냐 차이</b>일뿐이다.<br><br>
- 일단 코드를 보면서 이해해보려 하면, 이번엔 한 번 <b>학급을 기준</b> 으로 정의 해보도록 한다.

```java
import java.util.Comparator; //  import필요

class Student implements Comparator<Student> {
    int age;   //나이
    int classNumber; //학급

    Student(int age, int classNumber) {
        this.age = age;
        this.classNumber = classNumber;
    }

    @Override
    public int compare(Student o1, Student o2) {
        // o1의 학급이 o2의 학급보다 크다면 양수
        if (o1.classNumber > o2.classNumber) {
            return 1;
        }
        //o1의 학급이 o2의 학급과 같다면 0 
        else if (o1.classNumber == o2.classNumber) {
            return 0;
        }
        //o1의 학급이 o2의 학급보다 작다면 음수
        else {
            return -1;
        }
    }
}

```

앞서 Comparable 의 compareTo()와는 다르게, 두 객체를 비교하는 것이기 때문에 파라미터로 들어오는 o1과 o2의 classNumber를 비교해주는 것이다.<br><br><br>
좀 더 구체적으로는 Comparable의 compareTo는 선행요소가 자기 자신이 되고, 후행 원소가 매개 변수로 들어오는 o가 되는 반면에, Comparator의 compare는 선행원소가 o1이 되고, 후행
원소가 매개 변수로 들어오는 o가 되는 반면에,<br>
Comparator의 compare는 선행 원소가 o1이 되고, 후행 원소가 o2가 된다.<br><br>

이 말은 o1과 o2를 비교함에 있어 자기 자신은 두 객체 비교에 영향이 없다는 뜻이다. 조건물을 앞서 Comparable처럼 간략하게 할 수 있다.

```java
import java.util.Comparator; // import 필요

class Student implements Comparator<Student> {

    int age; //나이
    int classNumber;// 학급

    Student(int age, int classNumber) {
        this.age = age;
        this.classNumber = classNumber;
    }

    @Override
    public int compare(Student o1, Student o2) {
        /*
         * 만약 o1의 classNumber가 o2의 classNumber 보다 크다면 양수가 반환 될 것이고,
         * 같다면 0을, 작다면 음수를 반환할 것이다.
         * */
        return o1.classNumber - o2.classNumber;
    }
}
```

보다시피 a객체의 compare 메서드를 통해 비교하지만, 그 내부에선 두 매개변수인 b(o1)과 c(o2)가 비교되는 것이기 때문에 a객체와는 관련 없이 두객체의 비교값을 반환하게 된다.<bR>
만약에 a.compare 메서드에서 a와 비교하고 싶다면 다음과 같이 해주면된다.

a.compare(a,b); 즉, 객체 자체와는 상관없이 독립적으로 매개변수로 넘겨진 두 객체를 비교하는 것이 포인트다.<br><br>
그리고 여기서도 마찬가지로 위 예시처럼 수의 범위를 넘어가지 않을때는 return.o1classNumber - o2.classNumber로 해주어도 올바른 결과를 얻겠지만,<br>
만약 오버플로우 혹은 언더플로우가 발생할 경우 잘못된 결과를 얻게 된다.<br><br>

위 코드에서 b객체의 학급에 Integer.MIN_VALUE; 혹은 -2,147,483,648(Integer.MIN_VALUE와 같은 값을 가리킨다.)을 넣어보면 된다. 그러면 Underflow가 발생할 수 있다.

- Comparator 활용편
    - Comparator를 통해 compare 메서드를 사용하려면 결국에는 compare메서드를 활용하기 위한 객체가 필요하게 된다.<bR>
      a,b,c 객체가 생성되었고, 이들을 비교를 하고 싶다면 어느 한객체를 통해 compare메서드를 사용해야한다는 것이다.
- 즉, 다음과 같다.

```java
public class Test {
    public static void main(String[] args) {

        Student a = new Student(17, 2);    // 17살 2반
        Student b = new Student(18, 1);    // 18살 1반
        Student c = new Student(15, 3);    // 15살 3반

        //          ⋁
        int isBig = a.compare(a, b);
        //           ⋁
        int isBig2 = a.compare(b, c);
        //           ⋁
        int isBig3 = b.compare(a, c);

    }
}

// Student class 생략
```

보면 메서드를 호출하기 위한 대상(V 표시 된 부분)은 사실 a이건, b이건, c이건 어떤 객체를 통해 호출하던 상관이 없다.  
다르게 생각해보면 일관성이 떨어지는 뜻이기도 하다.

물론 비교만을 위한 Student 객체를 하나 더 생성해주는 방법도 있다.

```java
public class Test {
    public static void main(String[] args) {

        Student a = new Student(17, 2);    // 17살 2반
        Student b = new Student(18, 1);    // 18살 1반
        Student c = new Student(15, 3);    // 15살 3반

        //          ⋁
        int isBig = a.compare(a, b);
        //           ⋁
        int isBig2 = a.compare(b, c);
        //           ⋁
        int isBig3 = b.compare(a, c);

    }
}

// Student class 생략
```

```java
public class Test {
    public static void main(String[] args) {

        Student a = new Student(17, 2);        // 17살 2반
        Student b = new Student(18, 1);        // 18살 1반
        Student c = new Student(15, 3);        // 15살 3반
        Student comp = new Student(0, 0);    // 비교만을 위해 사용할 객체

        //           ⋁
        int isBig = comp.compare(a, b);
        //            ⋁
        int isBig2 = comp.compare(b, c);
        //            ⋁
        int isBig3 = comp.compare(a, c);

    }
}

// Student class 생략
```

하지만 위처럼 하면 우리가 Student클래스에서 변수로 두고 있던 age와 classNumber 변수는 굳이 쓸모가 없음에도 생성이 되어버린다는 단점이 있다.

즉 우리가 원하는 것은 Comparator비교 기능만 따로 두고 싶은것이다. Comparator 기능만 따로 두고 싶다면 <b>"익명 객체 클래스를 활용한다."</b>

익명 객체에 대해 잠깐 설명하자면,<br>
익명 객체는 쉽게 말해서 `이름이 정의되지 않은 객체`이다.<br>
자바는 객체지향 언어다. 그래서 어떠한 객체를 만든다고하면 class를 생성하여 이름을 정의한다.<bR>
그동안 예시로 들었던 Student 또한 Student라는 이름으로 정의된 객체다.<br><br><br>
이름이 정의되지 않는다는 것은 무엇일까?<br>
우리가 클래스를 생성할 때 class 키워드 다음에 이름을 정의했다. 하지만, 이름 없이 class를 정의할 수 있는가? 불가능하다.<bR><br>
하지만, 우리의 고민처럼 특정 구현 부분만 따로 사용한다거나, 부분적으로 기능을 일시적으로 바꿔야 할 경우가 생길 때가 있다.<br>
이것을 사용할 수 있게 하는 것이 익명객체이다.

```java
public class Anonymous {
    public static void main(String[] args) {

        Rectangle a = new Rectangle();

        // 익명 객체 1 
        Rectangle anonymous1 = new Rectangle() {

            @Override
            int get() {
                return width;
            }
        };

        System.out.println(a.get());
        System.out.println(anonymous1.get());
        System.out.println(anonymous2.get());
    }

    // 익명 객체 2
    static Rectangle anonymous2 = new Rectangle() {

        int depth = 30;

        @Override
        int get() {
            return width * height * depth;
        }
    };
}

class Rectangle {

    int width = 10;
    int height = 20;

    int get() {
        return height;
    }
}
```

보면 우리가 일반적으로 객체 생성방식과는 조금 다르다, 보통은 다음과 같이 생성하게 될것이다.<br>
` Rectangle a = new Rectangle();{//...구현부...//}` <br> <br>
왜 익명 객체인 것일까? 얼핏보면 같은 객체 생성 방식인것 같지만, 우리가 보아야 할것은 {}안의 구현부이다. 객체를 구현한다는 것은 무엇일까? 변수를 선언하고, 메서드를 정의하며 하나의 클래스(객체)로 만든다는
것을 의미한다.<br>
말자체로는 어려울수 있지만 위 예시의 Rectangle처럼 일반적인 클래스 구현방식과, interface 클래스를 implements하여<br>
interface의 메서드를 재정의하거나, class 상속 (extneds)하여 부모의 메서드, 필드를 사용 또는 재정의 하는것 들모두 객체를 구현하는 것이다.<br><br><br>
이 때, 구현을 하는 클래스들은 모두 이름이 존재한다.<br><br><br>
그러나 한번 <b> Rectangle anonymous2 = new Rectangle(){..} 이 부분에서, 구현부에서 분명히 변수를 선언하기도 하고,</b><br>
Rectangle 클래스의 메서드 get()을 `Override`를 했다.<br><br>
즉, 쉽게 생각하여 <b>Rectangle을 상속받은 하나의 새로운 class라는 것이다 </b><br>
분명 새로운 class인데 이름이 정의되지 않고 있다.<br>
이는 annonymous1 객체 또한 마찬가지다.<br><br><br>
이것은 Rectangle이 아닌가? 라는 생각이 들 수 있지만 아래 코드와 비교해본다.

```java
public class Anonymous {
    public static void main(String[] args) {

        Rectangle a = new Rectangle();
        ChildRectangle child = new ChildRectangle();

        System.out.println(a.get());        // 20
        System.out.println(child.get());    // 10 * 20 * 40
    }
}

class ChildRectangle extends Rectangle {

    int depth = 40;

    @Override
    int get() {
        return width * height * depth;
    }
}

class Rectangle {

    int width = 10;
    int height = 20;

    int get() {
        return height;
    }
}
```

위 코드에서는 Rectangle이라는 클래스를 상속받아 ChildRectangle이라는 이름으로 정의 된 자식 클래스가 있다.<br>
그리고 그 자식클래스에서는 depth란 필드(변수)도 새로 생성했고, get() 메서드를 가로 세로 높이의 곱을 반환하도록 재정의되었다.<br><br>
그리고 각 클래스는 a와 child 란 변수 명으로 객체를 담고 있다.<br><br><br>
이 아래는 익명 객체를 사용한 코드이다.<bR>

```java
public class Anonymous {
    public static void main(String[] args) {

        Rectangle a = new Rectangle();

        Rectangle anonymous = new Rectangle() {
            int depth = 40;

            @Override
            int get() {
                return width * height * depth;
            }
        };

        System.out.println(a.get());            // 20 
        System.out.println(anonymous.get());    // 10 * 20 * 40
    }
}

class Rectangle {

    int width = 10;
    int height = 20;

    int get() {
        return height;
    }
}
```

분명 앞서 본 상속받아 ChildRectangle 클래스를 만든 것과 같지만, 이 코드는 이름이 정의되어 있지 않고, anonymous라는 이름으로 객체만 생성되어 있다.<br><br><br>
이렇게 클래스 이름으로 정의되지 않는 객체를 익명 개체라 한다.<br>
이는 거꾸로 말하면, 이름이 정의되지 않기 때문에 특정타입 이 존재하는 것이 아니기 때문에 반드시 익명 객체의 경우는 상속할 대상이 있어야 한다는 것이다.<br><br>
이 때, 상속이라 함은 `class` 의`extends`뿐만 아니라 `interface`의 `implements`또한 마찬가지다.

```java
public class Anonymous {
    public static void main(String[] args) {

        Rectangle a = new Rectangle();

        Shape anonymous = new Shape() {
            int depth = 40;

            @Override
            public int get() {
                return width * height * depth;
            }
        };

        System.out.println(a.get());            // Shape 인터페이스를 구현한 Rectangle
        System.out.println(anonymous.get());    // Shape 인터페이스를 구현한 익명 객체
    }

}

class Rectangle implements Shape {
    int depth = 40;

    @Override
    public int get() {
        return width * height * depth;
    }
}

interface Shape {

    int width = 10;
    int height = 20;

    int get();
}
```

이제 이해가 간다.<br><br><br>
너무 먼 길을 돌아왔다. 이제 다시 본론으로 가자.<br>
우리가 원하는 것은 무엇이었을까? 바로 Comparator의 기능만 사용하고 싶은 것이다. <br>
즉, `Comparator` 의 구현을 통해 `compareTo`만 사용하고 싶은 것이라는 뜻이다.<br><br><br>
앞서 익명객체에서 설명한 것을 적용해보자.<br>
분명히 `Comparator`라는 `interface`는 존재한다. 이는 구현(상속)할 대상이 존재한다는 것이다. 이는 익명객체로 만들 수 있다는 것이다.<br><br>

즉, 이름은 정의 되지 않지만, `Comparator`를 구현하는 익명 객체를 생성하면 되는 것이다. <br>
이 때, `Comparator` 구현은 이 전에 `class Student implements Comapartor {...}` 에서 구현했던 방식 그대로 차용하면 된다.<br>
(단, 오버플로나 언더플로는 따로 고려하지 않았으니 주의하시길 바란다.)<br>

```java
import java.util.Comparator;

public class Test {
    public static void main(String[] args) {

        //익명 객체 구현방법 1.
        Comparator<Student> comp1 = new Comparator<Student>() {
            @Override
            public int compare(Student o1, Student o2) {
                return o1.classNumber - o2.classNumber;
            }
        };
    }

    //익명 객체 구현방법 2.
    public static Comparator<Student> comp2 = new Comparator<Student>() {
        @Override
        public int compare(Student o1, Student o2) {
            return o1.classNumber - o2.classNumber;
        }
    };
}

//외부에서 익명 객체로 Comparator가 생성되 때문에 클래스에서 Comparator를 구현할 필요가 없어진다.
class Student {
    int age;  // 나이
    int classNumber; // 학급

    student(int age, int classNumber) {
        this.age = age;
        this.classNumber = classNumber;
    }
}
```

익명 객체의 경우 필요에 따라 main 함수 밖에 정적(static) 타입으로 선언해도 되고, main 안에 지역변수처럼 non-static으로 생성해도 된다.<br><br>
(일단 필자는 가독성 측면에서 두 번쨰 방식이 좀 더 잘보이기 때문에 두번째 생성 방식(statc방식)으로 실행.)<bR><br>

외부에서 Comparator를 구현하는 익명객체가 생성되었기 때문에 , Student 클래스 내부에서 우린 Comparator를 구현해줄 필요가 없어졌다.

즉 , 이전에 a.compare (b,c) 이런식 아니라, 위에서 생성한 익명객체를 가리키는 comp를 통해 compcompare(b,c)이런 식으로 해주면 된다는 것이다.<br><br>

Comparable도 익명객체로 할 수 있느냐? 생성은 가능하다.<br>
하지만 좀만 고민해보면 굳이 `Comparable`을 익명 객체로 생성할 필요도 없고 오히려 복잡해진다. 이유는 단순하다.<br><br>
`Comparable` 과 `Comparator`의 차이는 계속 말했듯이 "자기 자신"과 하나의 매개변수를 비교하느냐, 두 개의 매개변수를 비교 하느냐 차이다.<br><br>
만약 `Comparable`을 익명객체로 다음과 같이 생성했다고 가정해보자.<br>

```java
public static Comparable<Student> comp=new Comparable<Student>(){
@Override
public int compareTo(Student o1){
        //구현부
        }
        }
```

그러면 Comparable에서 자기 자신은 무엇인가? 익명객체가 될 것이다. Student 객체가 아니라는 것이다. 즉, 익명의 객체와 Student가 비교하는 것이지, Student와 Student가 비교되는 것이
아니라는 것이다.<br><br><br>

```java
public class Test {
    public static void main(String[] args) {

        Student a = new Student(17, 2); //17살 2번
        Student b = new Student(18, 1); //18살 1번

        /*
         * Student b 객체는 comp의 30이랑 비교되는 것이다.
         * 즉, a.compareTo (b)처럼 서로 다른 객체에 대한 비교가 불가능하다.
         * */
        int classing = comp.compareTo(b);
    }

    //학급 대소 비교 익명 객체
    public static Comparable<Student> comp = new Comparable<Student>() {
        @Override
        public int compareTo(Student o) {
            return a - o.classNumber;

        }
    };
}
```

한마디로 자기와 동일하 타입의 자신의 객체와 어떤 객체를 비교하고자 하면 Comparable을 익명객체로 선언한다고 한들,<br>
동일한 타입 비교는 불가능하다는 것이다.

- Comparable,Comparator 와 정렬의 관계
    - 이제 `Comparable`과 `Comparator`의 각각의 차이점과 사용 방법을 이해했을 것이다.<br><br>
      객체를 비교하기 위해 Comparable 또는 Compartor를 쓴다는 것은 곧 사용자가 전의한 기준을 토대로 비교를 하여 양수,0, 음수 중 하나가 반환된다는 것이다.<br><br><br>
      여기서 정렬과의 관계를 알아보기 전에 `Java`의 일반적인 정렬기준에 대해 알고가야 할 필요가 있다.<br><br>
      대부분의 언어도 마찬가지지만, <b>Java 에서의 정렬은 특별한 정의가 되어있지 않는 한 '오름차순'을 기준으로 한다.</b><br>
      우리가 흔히 쓰는 `Arrays.sort()`, `Collections.sort()` 모두 오름차순을 기준으로 정렬이 된다는 것이다. <br><br><br>
      오름차순으로 정렬이 된다는 것은 무엇인가?<br><br><br>
      예로 들어 {1,3,2} 배열이 있다고 가정해보자, 그럼 우리가 최종적으로 얻어야 할 배열{1,2,3} 을 얻기 위해 정렬 알고리즘을 사용하게 될 것이다. <br>
      이 때, 정렬을 하기 위해 두 원소를 비교 하게 될 것 아닌가? 정려 메서드에서 두 수를 비교하기 우해 index 0 원소와 index 1 원소를 비교한다고 가정해보자.<br>
      그럼 선행 원소인 1과 후행 원소인 3의 경우 대소관계는 어떻게 되는가? 1이 3보다 작다.<br><br>
      앞서 선행 원소와 후행 원소를 비교 할 때, 얼만큼 차이가 나는지를 반환한다고 했다. <br>
      return o1 -o2; 를 한다면, 1-3 = 1-2 로 '음수'가 나올 것이다.<br><br>
      이 때, 자바에서 오름차순을 디폴트 기준으로 삼고 있다고 했다. <br>
      이 말은 <b>선행 원소가 후행 원소보다 '작다'는 뜻</b>이다.<br>
      즉, compare 혹은 compareTo를 사용하여 객체를 비교 할 경우 <b>음수가 나오면 두 원소의 위치를 바꾸지 않는다는 것</b> 이다.<br><br>
      그 다음 정렬 알고리즘에 의해 index 1 원소와 index 2 원소를 비교한다고 해보자.<br>
      선행 원소인 3이 2보다 크다.<br><br>
      `compare` 혹은 `compareTo`를 사용하여 index 1 원소와 index 2 원소를 비교한다면 '양수'가 나올 것이다. (3-2 = 1)이는 곧 이러면 선행 원소가 후행 원소보다 크다는
      뜻이다. <br><br><br>
      곧 이러면 선행 원소가 후행 원소보다 크다는 뜻이다. <br><br>
      즉 , compare혹은 compareTo를 사용하여 객체를 비교할 경우 <b> 양수가 나오면 두 원소의 위치를 바꾼다는 것</b>이다.<br>
      그러면 {1,2,3}으로 오름차순으로 정렬 될 것이다.<br><br><br>
      그럼 규칙을 일반화 할 수 있다.<br><br>
      <b>[ 두 수의 비교 결과에 따른 작동 방식]</b><br><br>
      <b> 음수 </b> 일 경우 : 두 원소의 위치를 교환 안함.
      <b> 양수 </b> 일 경우 : 두 원소의 위치를 교환 함.<br><br><br>
      정렬을 구현해보면 알겠지만 Counting Sort 같은 특수한 경우를 제외하고 Insertion, Quick, Merge등 다양한 정렬 알고리즘은 <b>'두 데이터 (요소)의 비교'</b> 통해 두
      원소를 교환할지 말지를 정하게 된다.<br><br>
      앞서 `primitive type`의 경우 이미 대소 비교가 가능하지만, 객체를 정렬하고자 한다면 너무나 당연히도 두 요소를 비교하기 위해서는 `Comparable`을 통한 `compareTo()`
      혹은, `Comparator`를 통한 `compare()`메서드를 활용 하여 두 객체의 대소를 비교 한다는 것이다.<br><br>
      진짜로 그럴까? <bR>
      `Array.sort`메서드에서의 `Merge sort`중 일부분은 다음과 같다.
  ```java
   @SuppressWarnings({"rawtypes","uncheked"})
  private static void mergeSort(Object [] src,
                                Object [] dest,
                                int low, int high, int off,
                                Comparator c){
    int length = high - low;
  
    // Insertion sort on smallest arrays
    if(length < INSERTIONSORT_THRESHOLD){
    for (int i = low; i<high; i++){
    for(int j = i ; j >low && c.compare(dest[j-1],dest[j])>0; j--){
  swap(dest, j, j-1);
  return;
  }
  //Recursively sort halves of dest into src
  int deswLow = low;
  int destHigh = high;
  low += off;
  high += off;
  int mid = (low + high)>>>1;
  mergeSort(dest, src, low, mid, -off, c);
  mergeSort(dest, src, mid, high, -off, c);
  
  // If list is already sorted, just copy from src to dest. This is an
  // optimization that results in faster sorts for nearly ordered lists.
  if(c.compare(src[mid-1],src[mid]) <= 0){
    System.arraycopy(src, low, dest, destLow,lenghth);
    return;
         }
       }
     }
  }
   ```
  보면 Comparator c라는 매개변수를 통해 c.compare를 호출하고 각 두 요소를 비교한다는 것을 볼 수 있다.<br><br>
  또한 `Comparator`가 아닌 `Comparable`을 통한 `compareTo()` 메서드를 활용하는 `Merge Sort` 또한 존재한다.

```java
class Test {
    @SuppressWarnings({"unchecked", "rawtpes"})
    private static void mergeSort(Object[] src, Object[] dest, int low, int high,int off) {
            int length = high,low;
            
            //Insertion sort on smallest arrays
        if (length < INSERTIONSORT_THRESHOLD){
            for (int i = low; i < high; i++) {
                for (int j = i; i >low &&((Comparable)dest[j-1]).compareTo(dest[j])>0; j--) {
                    swap(dest,j,j-1);
                    return;
                }
                //Recursively sort halves of dest into src
                int destLow = low;
                int destHigh = high; 
                low += off;
                high += off;
                int mid = (low + high)>>>1;
                mergeSort(dest,src,low,mid, -off);
                mergeSort(dest, src, mid, high,-off);
                
                //If list is already sorted, just copy from src to dest. This is an
                //optimization that results in faster sorts for nearly ordered lists.
                if (((Comparable) src[mid - 1]_.compareTo(src[mid]) <= 0)
                {
                 System.arraycopy(src, low, dest, destLow, length);
                 return;
                }
            }
        }
    }
}
```
위 코드에서 일관되게 <b> 오름차순으로 정렬하기 때문에</b> 두 원소중 선행 원소가 작으면 교환을 안하고, 그 반대라면 교환하는 메커니즘은 같다.<br><br>
예로 들어 다음과 같은 객체를 만든 뒤 이를 배열로 만들어서 생성 된 객체 배열을 정렬하고자 한다.
```java
public class Test{

    public static void main(String[] args) {
        MyInteger[] arr = new MyInteger[10];
        
        //객체 배열 초기화(랜덤 값으로)
        for (int i = 0; i < 10; i++) {
            arr[i] = new MyInteger((int)(Math.random()*100));
        }
    }
}
class MyInteger{
    int value;
    
    public MyInteger(int value){
        this.value = value;
    }
    
}
```
위 객체인 MyInteger 클래스는 사용자가 만든 객체라 아직 비교 기준이 없다. 그러면 어떻게 해주어야 하는가?

앞서 배웠던 비교 기준을 생성하며 ㄴ되는 것이다. 우리는 비교 기준 설정하는 방법 두 가지를 배웠다. `Comparable`과 `Comparator`이다.<br>
`Comparable`을 사용한다면 `MyInteger` 클래스에 구현 (`implements`)를 해야 할 것이다.

```java
class MyInteger implements Comparable<MyInteger> {

    int value;

    public MyInteger(int value) {
        this.value = value;
    }
    // 자기 자신의 value 를 기준으로 파라미터 값과의 차이를 반환한다.

    @Override
    public int compareTo(MyInteger o) {
        return this.value - o.value;
    }
}
```
그리고 나서 정렬 메서드로 가장 자주 쓰이는 `Arrays.sort()`메서드에 한 번 돌려서 테스트를 해보자 , 다음과 같다.
```java
import java.util.Arrays;
public class Test{
    public static void main(String[] args) {
        
        MyInteger[] arr = new MyInteger[10];
        
        // 객체 배열 초기화 (랜덤 값으로)
        for (int i = 0; i < 10; i++) {
            arr[i] = new MyInteger((int)(Math.random()*100));
        }
        //정렬 이전
        System.out.println("정렬 전 :  ");
        for (int i = 0; i < 10; i++) {
            System.out.print(arr[i].value + "  ");
        }
        System.out.println();
        
        Arrays.sort(arr);
        
        //정렬 이후
        System.out.print("정렬  후  :  ");
        for (int i = 0; i < 10; i++) {
            System.out.print(arr[i].value + "  ");
        }
        System.out.println();
    }
    
}
class MyInteger implements comparable<MyInteger>{
    int value;
    
    public MyInteger(int value){
        this.value = value;
    }
    
    @Override
    public int compareTo(MyInteger o){
        return this.value = o.value;
    }
}
```
결과는 이렇다. 
![img_4.png](img_4.png)<bR>
만약 Comparable을 구현 하지 않고 그냥 정렬했다면 ? 
![img_5.png](img_5.png)<br>
보면 이렇게 예외가 던져지면서 프로그램이 종료가 된다.
MyInteger클래스를 Arrays.sort 안에서 정렬을 하면서 원소를 비교하려 하는데, 해당 클래스가 비교할 수 잇는 기준이 정의되어있지 않아서 정렬 자체가 불가능한 것이다.<br><br>
만약 Comparable 대신 Comparator를 쓴다면 어떻게 해야할까?<br>
앞서 배운 것 처럼 익명객체를 생성하여 MyInteger에 대한 Comparator 를 구현해주는 것이다. 다음과 같이 말이다.
```java
Comaparator <MYInteger> comp = new Comparator<MyInteger>(){
    @Override
public int compare (MyInteger o1, MyInteger o2){
        return o1.value - o2.value;
        }
      };
```
위를 적용한 전체 코드이다.

```java
import java.util.Arrays;
import java.util.Comparator;

public class Test {

    public static void main(String[] args) {

        MyInteger[] arr = new MyInteger[10];

        //객체 배열 초기화 (랜덤 값으로 )
        for (int i = 0; i < 10; i++) {
            arr[i] = new MyInteger((int) (Math.random() * 100));
        }
    }

    static Comparator<MyInteger> comp = new Comparator<MyInteger>() {
        @Override
        public int compare(MyInteger o1, MyInteger o2) {
            return o1.value - o2.value;
        }
    };
}
class MyInteger {
    int value;
    
    public MyInteger(int value){
        this.value = value;
    }
}

```
(정적변수로 main 메서드 밖에 선언해줄 것이기에 static을 붙여 사용하는 예제이니 참고.)

그러면 이제 우리가 만든 comp익명 객체를 사용하여 정렬할 수 있지않을가? 
"Array.sort()에 어떻게 Comparator 익명 객체를 기준으로 정렬을 시키는것인가?"<bR>
이부분은 걱정할 것이 없다. `Arrays.sort()`에는 단순히 배열만 파라미터로 받는것이 아니라 `Comparator` 또한 파라미터로 받기도 한다.<br><br>
즉 우리가 쓸 메서드는 다음과 같다.

```java
import java.util.Comparator;

class Test {
    public static <T> void sort(T[] a, Comparator<? super T> c){
        if (c == null){
            sort(a);
        } else{
            if(LeagacyMergeSort.userRequested){
                legacyMergeSort(a,c);
            }else{
                TimSort.sort(a, 0,a.length, c, null,0,0);
            }
        }
    }
}
```
이 메소드에 대한 내용은 다음과 같다.
![img_6.png](img_6.png)
<B> `Comparator` 파라미터로 넘어온 C의 비교 기준을 갖고 파라미터로 넘어온 객체배열 a를 정렬 하겠다는 의미 </B>
우리가 그동안 Arrays.sort()를 쓸 때 Arrays.sort(array)l 이런식으로 배열만 넘겨주었지만 사실은 `Comparator`를 구현된 객체를 파라미터로 같이 넘겨주어 Arrays.sort(array,comp);로도 쓸 수 있다는 것이다.<br>
즉, 우리가 구현한 `Comparator` 익명 객체를 이용하여 정렬을 할 수 도 있다.

```java
import java.util.Arrays;
import java.util.Comparator;

public class Test {
    public static void main(String[] args) {
        MyInteger[] arr = new MyInteger[10];

        //객체 배열 초기화 (랜덤 값으로 ) 
        for (int i = 0; i < 10; i++) {
            arr[i] = new MyInteger((int) (Math.random() * 100));
        }

        //정렬 이전
        System.out.println("정렬 전 : ");
        for (int i = 0; i < 10; i++) {
            System.out.print(arr[i].value + " ");
        }
        System.out.println();

        Arrays.sort(arr); // MyInteger에 대한 Comparable 을 사용하여 정렬
        //정렬 이후 
        System.out.print("정렬 후 : ");
        for (int i = 0; i < 10; i++) {
            System.out.print(arr[i].value + "  ");
        }
        System.out.println();
    }

}

class MyInteger implements Comparable<MyInteger> {
    int value;

    public MyInteger(int value) {
        this.value = value;
    }

    @Override
    public int compareTo(MyInteger o) {
        return o.value - this.value;
    }
}
```

양수, 음수 관계를 이해하기 어렵다면 다음과 같이 외우면 좀 더 편하다.
선행 원소는 값이 작다고 가정하고, 후행 원소는 값이 크다고 가정한다.
그리고 다음을 해석해보자.
```java
/*
 * 오름차순
 * 작은 원소가 큰 원소보다 앞에 있으므로 오름차순이다.
 * */
public int compareTo(myClass o){
    return this.value - o.value;
        }
        public int compare(Myclass o1, Myclass o2){
    return o1.value - o2.value;
        }
/*
 * 내림차순
 * 큰 원소가 작은 원소보다 앞에 있으므로 내림차순이다.
 * */
public int compareTo(myClass o){
    return o.value - this. value;
        }
        public int compare(MyClass o1, MyClass o2 ){
    return o2.value - o1.value;
        }
```
물론 뺄셈을 통해 위와 같이 반환하는 것은 Overflow나 UnderFlow를 고려하지 않은 상태이므로 주의가 필요.<br><br><br><br>
Comparator는 익명객체로 여러개를 생성할 수 있지만, Comparable의 경우 compareTo 하나 밖에 구현할 수 없다.<br>
그렇다보니, 보통은 Comparable 은 여러분이 비교하고자 하는 가장 기본적인 설정 (보통은 오름차순)으로 구현하는 가 많고, Compartor는 여러개를 생성 할 수 있다보니 특별한 정렬르 원할 때 많이 쓰인다.<br><br>
쉽게 말해 Comparable은 기본(default)순서를 정의하는데 사용되며, Comparator는 특별한 기준의 순서를 정의할 때 사용된다.<br><br><br>
이것을 이용하여 다음과 같은 복합적으로도 구현하여 각기 다른 정렬도 가능하다.

```java
import java.util.Arrays;
import java.util.Comparator;

public class Test {
    public static void main(String[] args) {

        Student[] arr = new Student[9];

        arr[0] = new Student(3, 70);
        arr[1] = new Student(1, 70);
        arr[2] = new Student(1, 50);
        arr[3] = new Student(2, 60);
        arr[4] = new Student(2, 80);
        arr[5] = new Student(1, 30);
        arr[6] = new Student(2, 70);
        arr[7] = new Student(3, 90);
        arr[8] = new Student(3, 60);

        Student[] arr2 = arr.clone();//정렬 테스트를 위한 arr 객체 복사
        Stduent[] arr3 = arr.clone();//정렬 테스트를 위한 arr 객체 복사

        System.out.println("(c,s)->(classNum, score)");
        //정렬 이전
        System.out.print("정렬 전 : ");
        for (Student v : arr) {
            System.out.print(v);
        }
        System.out.println();
        Arrays.sort(arr);        //Comparable 사용

        System.out.print();
        for (Student v : arr) {
            System.out.print(v);
        }
        System.out.println();

        Arrays.sort(arr2, comp1);// Comparator 사용
        System.out.println("\n 학급 오름차순 정렬 (같을 경우 성적 오름차순)");
        for (Student v : arr2) {
            System.out.print(v);
        }
        System.out.println();

        Arrays.sort(arr3, comp2); //Comparator 사용
        System.out.print("\n 성적 내림 차순 (같을 경우 학급 오름 차순");
        for (Student v : arr3
        ) {
            System.out.print(v);
        }
        System.out.println();
    }

    static Comparator<Student> comp1 = new Comparator<Student>() {
        @Override
        public int compare(Student o1, Student o2) {

            //만약 학급이 같다면 성적을 기준으로 "오름차순"으로 정렬한다.
            if (o1.classNum == o2.classNum) {
                return o1.score - o2.score;
            }
            return o1.classNum - o2.classNum; // 학급 기준 오름차순으로 정렬한다.
        }
    };

    static Comparator<Student> comp2 = new Comparator<Student>() {

        @Override
        public int compare(Student o1, Student o2) {
            
            //만약 성적이 같다면 학급을 "오름차순"으로 정렬한다.
            if (o1.score == o2.score){
                return o1.classNum - o2.classNum;
            }
            return o2.score - o1.score;// 성적을 내림차순으로 정렬한다.
        }
    };
}

class Student Implements Comparable<Student>{
    int classNum;
    int Score;
    
    public Student(int classNum, int score){
        this.classNum = classNum;
        this.score = score;
        }
        
        @Override
public int comapreTo(Student o ){
        //만약 학급이 같다면 성적을 기준으로 "내림차순"으로 정렬한다.
        if(this.classNum == o.classNum){
            return o.score - this.score;
        }
        return this.classNum - o.classNum; //학급 기준으로 오름차순으로 정렬한다.
        }
        @Override
public String toString () {
        return "("+classNum + ", "+ score + ")";
        }
        }
```
위 코드들은 Overflow나 Underflow를 고려하지 않은 코드이다.
자료형의 전체 범위 내에서 비교를 하려면 if문과 > < == 같은 비교 연산자를 통해 비교하여 음수,0, 양수를 반환하도록 하는것이 안전하다는 것을 기억하자.

-----
String의 경우 두 String간의 문자열 비교를 위하여 compareTo()를 썼을 경우, 이 메서드가 가능한 이유가 바로 `String`클래스에 `Comparable`을 `implement`하여 `compareTo()`메서드를 구현하고 있기 때문이다.

```java
import java.lang.constant.Constable;
import java.lang.constant.ConstantDesc;

public final class String
        implements java.io.Serializable, Comparable<String>, CharSequence, Constable, ConstantDesc{
    
}
```
위 `String` 클래스에 보면 우리가 예시로 활용했던 것처럼 `Comparable<String>`을 `implements` 해주고 있고, `String class` 에서 쭉 내려가다보면 `compareTo` 메서드가 구현되어 있음을 확인할 수 있다.
```java
public int compareTo(String anotherString){
    byte v1[] = value ;
    byte v2[] = anotherString.value;
    byte coder = coder();
    if(coder == anotherString.coder()) {
        return coder == LATIN1 ? StringLAtin1.compareTo(v1,v2)
                                :StringUTF16.compareTo(v1,v2);
        }
    return coder == LATIN1 ? StringLatin1.compareToUTF16(v1,v2)
                           : StringUTF16.compareToLatin1(v1,v2);
        }
```

이렇게 객체의 비교(순서)를 정의하는 것은 반드시 알아두어야할 내용중 하나다. 특히 `Compareble`과`Comparator`의 차이 점 또한 명확하게 이해해야 나중에 Java로 어떤 프로젝트를 하더라도,
속도,유지보수 등 여러 측면에서 빠르고 안정적으로 코딩할 수 있기 때문이다.

특히나 자바는 `객체지향`언어이다. 당장은 int double 같이 기본 타입으로만 프로그래밍했을지라도,
프로젝트등 어떤 프로그램을 개발하려고 할 때는 객체를 중심으로 파일들을 나누고 기능드을 분리하여 따로 클래스를 만드는 등 별도로 클래스를 나누는 것이 허다할 것이다.