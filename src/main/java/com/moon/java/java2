# <u>Java 2. Collection Framework </u>
- 아래 내용은 읽어보면서 java로 직접 구현해보자.

## 2.1 Java Collection Framework
 - Java Collection Framework는 객체들을 관리하기 위해 사용하는 컨테이너 클래스들의 집합이다.


 - 컬렉션 관련 인터페이스들과 클래스들은 java.util.* 패키지 (package)에 포함되어 있다.
   - Collection Interface :순서 없는 객체들의 집합이다.
   - List Interface : 순차적 나열로 순서 지정이 가능한 객체들의 집합이다.
   - Set Interface : 중복을 허용하지 않는 객체들의 집합이다. 
   - Queue Interface : FIFO (First In First Out) 처음 저장하는 객체가 가장 먼저 나오는 구조의 집합이다.
   - Map : 키와 그 키에 대응하는 객체들로 이루어진 집합이다.
   

 - 저장 관리 하고자 하는 객체들의 특성에 따라 사용할 컬렉션 클래스를 선택한다.


 - 컬렉션 클래스를 선택할 때 필요한 대표적인 고려 사항은 다음과 같다.
   - 저장 객체의 추가, 삭제와 같은 데이터의 변경이 자주 발생하는지.
   - 저장 객체의 빠른 탐색이 최우선인지 필요한지.
   - 저장 메모리를 최대한 효율적으로 사용하고자 하는지.

![img.png](img.png)

## 2.2 Collection 인터페이스 그룹의 클래스

- List Collection
  - List는 ? 
    - List는 배열과 비슷한 자바의 자료형이고 편리한 기능을 상당히 많이 가지고 있다.
  - List의 종류 
    - List 또한 컬렉션이다.
    - List의 종류는 아래 그림과 같다.
    - ![img_1.png](img_1.png)
    1. Linked List : 메모리를 효율적으로 관리하기 위해서 사용, 저장 용량을 늘릴 때 빠름, 데이터 참조 매우 느림, 데이터 삭제 매우 빠름.
    2. Array List  : 저장 용량을 늘릴 때 많은 시간이 소요됨, 저장 용량 늘릴 때 느림, 데이터 참조 매우 빠름, 데이터 삭제 매우 느림.
    3. Vector      : ArrayList와 비슷하나 동기화 처리의 차이가 있다.
    

- ArrayList Class  
  - ArrayList Class는 ___re-sizable-array___ 이면서 비동기 이다.  
  만약 동기화가 필요할 때는 Collections.synchronizeList() 메서드를 통해 동기화가 보장되는 List 를 반환받아 사용한다.  
  - ArrayList Class와 유사한 Vector Class는 resizable-array이고 동기화를 보장한다.
  - ArrayList Class는 내부적으로 배열을 이용하여 요소를 저장한다.
  - 특정 위치에 요소룰 추가하거나 삭제시킬 수 있다.
  - 여러 가지 메서드를 지원한다.
  - Iterator를 이용하여 사용이 가능하다.
  - 중복된 요소도 저장이 가능하다.
  - ```java
     ArrayList <String> arr  = new ArrayList<String>();
    arr.add("a");    
    arr.add("b");    
    arr.add("c);    
    ```
    - ArrayList와 Vector는? 
      - ArrayList와 Vector는 "동적인 배열을 사용할 때 주로 사용"된다.
    - Vector의 특징
      - Vector는 현재 Collection Framework에 포함되어 있지만 이전에는 자바의 초기 버전에서 정의한 인터페이스이다.
      - 현재는 재구성 되어서 Collection 프레임워크에 들어가 있다고 보면 된다 .
      1. 크기가 동적으로 조절이 가능한 동적 배열을 구현한다.
      2. 배열처럼 정수 인덱스로 배열에 접근이 가능하다.
      3. 동기화 되어 있어 한 번에 하나의 스레드로 벡터의 메서드를 호출할 수 있다.
    - ArrayList 특징
      - ArrayList는 Collection Framework에 포함되어 있다. 
      - 크기를 동적으로 바꿀 수 있는 동적 배열이다.
      - 자바의 표준 배열보다 느릴 수 있지만 배열에서의 조작이 많아질 때 유용하게 사용된다.
      - 데이터 타입 설정이 불가능하기에 타입 객체를 참조해서 사용한다. 
    
    - ArrayList와 Vector의 차이점
      1. 동기화 : ArrayList는 동기화가 되어있지 않지만 Vector는 동기화가 되어 있다.  
      이 말의 뜻은 ArrayList는 멀티 스레드 (Multi-Thread)에서 작업이 가능하지만 Vector는 단일 스레드에서만 사용이 가능하다.  
      2. 배열의 길이 증가 : 배열의 최대 길이까지 왔을 때 ArrayList는 크기가 지정되어 있지 않을 때 50%씩 증가한다.
      하지만, Vector는 2배씩 크기가 증가한다는 점을 가지고 있다.
      3. 동기, 비동기 : ArrayList는 비동기어서 많은 스레드가 동시에 작동될 수 있으므로 한 번에 하나의 스레드만 작동할 수 있는 Vector보다 좋은 성능을 가지고 있다.
      4. 스레드 안전 : 멀티 스레드 프로그래밍에서 여러 스레드가 동시에 접근했을 때 프로그램 실행에 있어서 문제가 나지 않음을 뜻한다.  
      ArrayList는 동기화 되어 있지 않아 동기화할 필요가 없고, Vector는 동기화되어 있기 때문에 한 번에 하나의 스레드만 접근이 가능하여 안전하다.
      
  - ArrayList 구현
    1. ArrayList는 크기가 고정되지 않은, 즉 동적 배열을 의미한다.
    2. 배열 (Array)와의 차이점으로 배열은 초기화할 때 크기를 지정해야 하지만, ArrayList 는 그러지 않아도 된다.  
    즉 배열은 고정 값의 크기를 가지게 되고, 이후에 크기를 늘리는 행위를 하려면 새로운 배열을 생성하여 내용을 복사해야 하는 반면에, ArrayList는 그냥 추가해 주면된다.
    3. 그렇다면 동적 크기를 갖는 ArrayList를 구현하려면 어떻게 해야할까?  
    제네릭이라는 것이 있다. 제네릭은 쉽게 말하면 하나의 구조에 대해 여러 자료형을 사용할 수 있도록 하는 것이다.  
    우리가 `String name`이라는 변수를 통해 홍길동 , 김철수, 김영희 등을 지정하는 것처럼 `name`을 `String`뿐만 아니라 `Integer, Float, Boolean`등 여러개의 자료형을 사용 수 있도록 해주는 것이다.  
    이러한 제네릭을 사용하기 위해서는 제네릭 클래스를 만들어야하는데, 간혹 어떤 클래스를 볼 때 다음과 같은 구조를 본 적 있을 것이다.
  4. `class Point<T>{...}`  
  여기서 <T> 부분이 제네릭 부분이며, 내가 자료형을 T로 표현한 부분은 모두 해당 클래스를 사용할 때 지정한 자료형임을 나타내는 것이다. 따라서 간략히 Point<T>를 통해 두가지를 모두 구현할 수 있게 된다.
-----------
  Array List 
  이름에 정답이 있을 것이다.
  Array List, 즉 Array를 이용하여 List를 만드는 것이다. Array는 고정 크기를 갖는데 어떻게 동적 크기를 만든다는거지?
  본 게시글의 시작 부분에서 "...배열은 고정값의 크기를 가지게 되고, 이후에 크기를 늘리는 행위를 하려면 ___새로운 배열을 생성하여 내용을 복사___ ..."
  즉 ,ArrayList 내부에 어떤 고정 크기를 갖는 배열을 가지고 있고, 어떤 요소를 추가할 때 그 배열의 크기를 넘어가게 되면 배열의 크기를 늘려주면 된다.
  
  ArrayList를 만들기에 앞서 목적이 무엇인지 생각해보자.
  
  1. 어떠한 __Data를 보관__ 한다.
  2. 보관된 __Data를 반환__ 한다.
  -----
  1. Data를 보관할 때 조금 옵션을 추가해보자면 __제일 앞에, 제일 뒤에, 특정한 위치에__ 이렇게 3가지가 있을 수 있다. (제일 뒤는 가장 마지막으로 추가한 Data의 뒤를 의미)
  2. Data를 반활할 때 마찬가지로 옵션을 추가해 보면 __제일 앞에, 제일 뒤에, 특정한 위치에__ 이렇게 3가지가 있다. 
위 목적을 바탕으로 ArrayList가 갖는 요소를 생각해보면 Array, index (혹은 Iterator)면 충분하다.
이제 ArrayList를 만들기 위한 준비는 끝났다.
  ```java
package com.moon.java.collectionFramework;

public class ArrayList {
    Object[] arr = null;
    int capacity = 0;
    int size = 0;

    ArrayList(int capacity){
        this.capacity = capacity;
        arr = new Object[capacity];
        size = 0;
    }

    ArrayList(){
        capacity = 1;
        arr = new Object[capacity];
        size = 0;
    }
}
```
ArrayList class에 대하여, array, arr의 크기를 알려주는 capacity, 그리고 현재 arr의 size를 반환해주는 size를 만들었다.  
(size는 arr이 지금까지 사용하고 있는 크기, capacity는 arr의 length를 알려주는 변수이다.)

그리고 ArrayList를 생성함과 동시에 arr을 전달 받은 size로 크기를 초기화하거나, 그러지 않은 경우 배열의 크기를 1로 설정했다.  
(1이상으로 해도 된다. 다만 0으로 할 경우, ArrayList 생성 후에 삽입을 한다면 에러가 발생하니 주의하자.)
----
#### ___데이터 보관___
데이터 보관을 구현할 차례이다. 이 때 주의해야 할ㅈ 점은 다음과 같다.
1. arr이 꽉찼다면, arr의 크기를 바꾸고 내용을 복사한다.
2. 삽입하는 위치가 특정위치일 경우 , 해당 위치로부터 요소들을 뒤로 한칸씩 민다.
1번으 경우 그림으로 표현한다면 다음과 같다.  
3. ![img_2.png](img_2.png)  
arr이 가득 찬 상태에서 새로운 요소를 추가한다면, 새로운 배열을 만들고, 해당 배열의 크기를 기존의 2배로 만들면 된다. 이후에 새로운 배열에 기존 배열을 복사하고, 새로운 요소를 추가해주면 된다.  
2번의 경우, 그림으로 표현하면 다음과 같다.
![img_3.png](img_3.png)
![img_4.png](img_4.png)
4. 그림에서 보면 새로운 요소 5를 두번째에 추가하려고 한다.

하지만 이미 두번째부터 2,3,4 라는 요소가 삽입되어 있다. 이럴 경우, 둘 셋, 네 번째의 위치의 요소들으 뒤로 한칸씩 밀어주고, 내가 원하는 위치에 데이터를 삽입하면 된다.
이를 응용하여, 제일 앞에 요소를 추가한다면, 모든 요소를 뒤로 한칸씩 밀어주면 된다.
```java

public class ArrayList {
  Object[] arr = null;
  int capacity = 0;
  int size = 0;

  public void add(Object element) {
    if (size == capacity) {
      expandArray();
    }
    arr[size++] = element;
  }

  public void addFirst(Object element) {
    add(0, element);
  }

  private void add(int index, Object element) {
    if (size == capacity) {
      expandArray();
    }
    for (int i = size; i >= index; i--) {
      arr[i] = arr[i - 1];

      arr[index] = element;
      size++;
    }
  }

  private void expandArray() {
    capacity *= 2;
    Object[] tempArr = new Object[capacity];
    copyArr(tempArr, arr);
    arr = new Object[capacity];
    copyArr(arr, tempArr);
  }

  private void copyArr(Object[] arr1, Object[] arr2) {
    for (int i = 0; i < arr2.length; i++) {
      arr[i] = arr2[i];
    }
  }
}
```
요소를 추가할 때마다 Size는 증가하게 되고 따라서 arr이 가득 차게 되면 size는 capacity와 값이 같아지게 된다.  
이를 조건으로 사용하여 arr이 가득 찼다면 expandArray함수를 호출함으로써 arr의 크기를 확장한다.
기본적으로 add 함수는 배열의 가장 뒤에 요소를 추가하며, 추가하고자 하는 위치가 있을 경우 해당 `index`로 데이터를 삽입한다.

#### ___데이터 반환___
- 데이터를 반환하는 코드는 비교적 단순하다.
- 원하는 위치에 대해 Object를 반환해주면 끝이다.
```java
   public Object get(int index){
        if(size <= 0){
        System.out.println("배열이 비어 있습니다.");
        return null;
        }
        return arr[index];
    }
```  
이 때 주의해야 할 점은 내가 구하고자하는 위치가 배열의 크기를 넘어설 수 있다. 이를 따로 조건문으로 처리해주어도 되지만,  
그냥 반환함으로써 Out of Bounds 예외를 출력해주어도 되기 때문에 따로 작업하지 않았다.

#### ___추가적인 동작들___
추가적으로 배열 초기화, 삭제,Size 반환, Capacity 반환등이 있을 수 있다.
삭제의 경우, 삭제하고자 하는 위치가 배열의 크기를 넘어가는지, 이미 비어있는지 등을 확인하고 삭제,반환 해주면 된다.  
나는 따로 조건을 추가하지 않았다.  
초기화는 현재의 capacity로 arr를 초기화 시켜주면 된다.
```java
    public Object remove(int index){
        /*
        * 크기 초과, 이미 비어있는지 등 조건문은 원하는대로 추가해주면 된다.
        * */
        Object result = arr[index];
        arr[index] = null;

        return result;
    }

    public void reset(){
        arr= new Object[capacity];
    }

    public int size(){
        return this.size;
    }

    public int getCapacity(){
        return this.capacity;
    }
```

