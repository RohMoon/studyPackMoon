### 제네릭 / Generic

- 제네릭이란 JDK 1.5부터 도입된 **_클래스 내부에서 사용할 데이터 타입_** 을 외부에서 지정하는 기법이다.

```java
//List interface
public interface List<E> extends Collection<E> {
    //...
}
```

```java
import java.util.ArrayList;

class Generic<E> {

    public static void main(String[] args) {
        List<String> words = new ArrayList<>();
    }
}
```

- 제네릭 사용 이유 예제

```java
class GenericEx {
    public static void main(String[] args) {
        List numbers = arrays.asList(1, 2, 3, 4, 5, 6);
        int sum = 0;
        for (Object number : numbers) {
            sum += (int) number;
        }
    }
}
```

위는 List안에 모든 숫자를 더하는 로직이다. List에 타입 지정을 안했기 때문에 Object로 타입이 지정되고 더하는 부분에서 형 변환을 직접 해줘야 하는 번거로움이 있다.  
위 예제에서는 형 변환을 한번 밖에 안했지만 만약 타입 지정을 안 한 List가 사용되는 곳이 1000군데가 넘는다면 1000군데서 전부 예제처럼 직접 형변환을 해줘야 하는 번거로움이 있다.

제네릭을 사용한다면 아래와 같아진다.

```java
import java.util.Arrays;

class UseGeneric {
    public static void main(String[] args) {
        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6);
        int sum = 0;
        for (Integer number : numbers) {
            sum += number;
        }
    }
}
```

불필요한 형 변환 없이 코드가 깔끔해진다. 또한 타입 안전성이 있다.

```java
import java.util.Arrays;

class UseGeneric {
    public static void main(String[] args) {
        List numbers = Arrays.asList("1", "2", "3", "4", "5", "6");
        int sum = 0;
        for (Object number : numbers) {
            sum += (int) number;
        }
    }
}
```

int형으로 형 변환을 해주며 더해주지만 List의 요소가 int형이라는 보장이 없다. 위 예제와 같이 List에 문자열을 넣어주어도 컴파일 에러가 발생하지 않고 ClassCastException 이 터지게 된다.
컴파일시 타입을 체크하고 에러를 찾아낼 수 있는 컴파일 언어의 장점을 발휘하지 못하는 셈이다.

제네릭을 사용했다면 아래와 같이 컴파일 시에 의도하지 않은 타입이 들어오는걸 막을 수 있다.

```java
import java.util.Arrays;

class UseGeneric {
    public static void main(String[] args) {
        List<Integer> numbers = Arrays.asList("1", "2", "3", "4", "5", "6");
        int sum = 0;
        for (Integer number : numbers) {
            sum += number;
        }
        System.out.println(sum);
    }
}
```

------

### 타입 파라미터 컨벤션

- 제네릭에서 사용하는 타입 파라미터에 자주 봤던 T 같은 문자가 아니고 아무런 문자나 넣어도 코드가 작동하는 데는 문제가 없다.

```java
public class Car<DunDung> {
    private final DunDung name;
    //...
}
```

하지만 타입 파라미터에도 컨벤션이 존재한다.
> [ Code Conventions for the Java Programming Language 글의 Why Have Code Conventions 코드 컨벤션:](https://www.oracle.com/java/technologies/javase/codeconventions-introduction.html#16712)

- 아래는 타입 파라미터 컨벤션이다.
  ![img.png](img.png)

1. E - Element ( used extensively by the Java Collections FrameWork)
2. K - Key
3. N - Number
4. T - Type
5. V - Value
6. S,U,V etc. - 2nd, 3rd ,4th types 제네릭 클래스나 메서드를 구현할 일이 있다면 컨벤션에 맞추어서 구현할 것.

------

### 제네릭 메서드

- 제네릭 타입을 메서드 리턴 타입 앞에 선언한 메서드를 제네릭 메서드라 한다.

```java

public class Car<T> {
    private final T name;

    private Car(T name) {
        this.name = name;
    }

    public static <M> Car<M> from(m name) {
        return new Car<>(name);
    }

    public <M> void printEqualsCar(Car<M> car) {
        System.out.println(this.equals(car));
    }
}
```

- 위와 같은 Car 클래스에서 from 메서드와 printEqualsCar 메서드가 제네릭 메서드이다. 이해를 돕기 위해 제네릭 메서드 타입을 컨벤션에 맞지 않게 `<M>` 으로 정한 점을 이해해주시길 바란다.

- 제네릭 메서드 타입 `<M>`를 리턴 타입 앞에 붙여서 표시하므로 헷갈릴 수 있는데, 제네릭 타입을 메서드 리턴 타입 앞에 붙여주는 것이 문법일 뿐이다. 메서드 리턴 타입과는 다른 영역이다.

- 또한 클래스에 선언한 `<T>`와 제네릭 메서드에 붙인 `<M>` 과는 관련이 없다. 제네릭 메서드에 붙인 `<M>`과 같은 타입은 해당 메서드에서만 적용되는 제네릭 타입이다.

- 제네릭 메서드를 사용하려면 반드시 리턴 타입 앞에 해당 메서드에서 어떤 제네릭 타입을 사용할 것인지를 붙여줘야 한다는 것을 기억하자.  
  아래와 같은 형태는 컴파일 에러가 난다.

```java
public class Car<T> {
    public static Car<M> from(M name) { //컴파일 에러
        return new Car<>(name);
    }
    //... 
}
```

- 마지막으로 제네릭 클래스가 아닌 일반 클래스에서도 제네릭 메서드를 사용할 수 있다는 점을 기억하자.

----

### 제한된 제네릭

- 제네릭은 원하는 타입이 있을때도 모든 타입이 들어올 수 있는 문제가 있다.

```java
public class Car<T> {
    private final T name;

    public Car(T name) {
        this.name = name;
    }
    //...
}
```

위와 같은 Car 클래스 인스턴스 변수 name은 문자 관련 타입 지정되기를 원해도 아래와 같이 아무 타입이나 들어올 수 있다.

```java
public class Car<T> {
    public static void main(String[] args) {
        Car<Integer> car = new Car<>(1);
    }
}
```

이럴 때 타입 뒤에 `extends` 키워드를 사용해 타입을 제한시킬 수 있다.

```java
public class Car<T extends CharSequence> {
    private final T name;

    public Car(T name) {
        this.name = name;
    }
    //...
}
```

CharSequence 인터페이스 하위 객체들만 데이터 타입으로 지정할 수 있게 함으로써 인스턴스 변수 name에 문자열 관련 타입만 지정할 수 있게 되었다.

```java
class Ex {
    public static void main(String[] args) {
        Car<String> car = new Car<>("sports");
    }
}
```

아래와 같이 `Collections.sort` 에서도 제한된 제네릭을 사용하고 있다.

```java
class ex {
    public static <T extends Comparable<? super T>> void sort(List<T> list) {
        list.sort(null);
    }
}
```

---

### Generic Type Erasure

- 제네릭은 위에서 말했던 것처럼 JDK 1.5에 도입이 되었다. 제네릭을 공부해보셨으면 확실히 버그에 대한 처리와 좀 더 안정적이고 편리하게 개발을 할 수 있는데,  
  이러한 제네릭이 1.5부터 나왔기에 하외 버전과의 호환성 유지를 위한 작업이 필요했고, 그에 따라 코드의 호환성 때문에 소거(erasure)방식을 사용하게 된다.

제네릭과 배열의 차이를 2가지만 간단하게 알아보면서 소거 방식에 대해 정리해보자.

1. 배열은 공변이고, 제네릭은 불공변이다.
    1. 공변이란? 자기 자신과 자식 객체로 타입 변환을 허용해주는 것이다.
   ```java
    Object[] before = new Long[1];
   ```

그렇기 때문에 위와 같은 문법을 허용한다.

2. 불공변이란?
    1. List<String>과 List<Object> 가 있을 때 두 개의 타입은 전혀 관련이 없다는 뜻이다.

  ```java
  public class Test {
    public static void test(List<Object> list) {
      
    }

    public static void main(String[] args) {
        List<String> list = new ArrayList<>();
        list.add("Moony");
        test(list); // 컴파일에러 .
    }
}
  ```
   제네릭이 ___불공변___ 이 아니라면 위의 코드가 컴파일 에러가 발생하지 않았을 것이다.
   하지만 ___불공변___ 이라는 자기와 타입이 같은 것만 같다고 인식하는 특징 때문에 컴파일 에러가 발생한다.  
   이러한 특성 때문에 제네릭이 컴파일 타임에 타입 안정성을 가지는 장점을 가질 수 있다.
   
3. 배열은 ___구체화(reify)___ 되고, 제네릭은 ___비 구체회(non-reify)___ 가 된다.
   1. 구체화 타입(reifiable type) : 자신의 타입 정보를 런타임에도 알고 있는 것
   2. 비 구체화 타입(non-reifiable type): 런타임에는 소거(erasure)가 되기 때문에 컴파일 타임보다 정보를 적게 가지는 것.
- 여기서 바로 소거가 나온다. 바로 제네릭은 컴파일 타임에 타입 체크를 한 후에 런타임에는 타입을 지우는 방법을 사용한다.

### Generic Type Erasure란?
- 소거란 원소 타입을 컴파일 타입에만 검사하고, 런타임에는 해당 타입 정보를 알 수 없는 것 이다.
- 컴파일 타임에만 타입 제약 조건을 정의하고, 런타임에는 타입을 제거한다는 뜻이다.

#### Java 컴파일러의 타입 소거
- `unbounded Type(<?>,<T>)`는 `Object`로 변환합니다.
- `bound type(<E extends Comparable>)`의 경우 `Object`가 아닌 `Comparable`로 변환한다.
- 제네릭 타입을 사용할 수 있는 일반 클래스, 인터페이스, 메소드에만 소거 규칙을 적용합니다.
- 타입 안정성 보존을 위해 필요하다면 `type casting`을 넣는다.
- 확장된 제네릭 타입에서 다형성을 보존하기 위해 `bridge method`를 생성한다.

__unbounded type__ 
Object로 변경되는 예
```java
//컴파일 할 때 (타입 소거 전)
public class Test<T> {
    public void test(T test){
        System.out.println(test.toString());
    }
}
```
```java
 //런타임 때 (타입 소거 후 )
public class Test {
    public void test(Object test){
        System.out.println(test.toString());
    }
}
```
------
#### __bound type__
```java
public class Test<T extends Comparable<T>>{
    private T data;
    
    public T getData(){
        return data;
    }
    
    public void setData(T data){
        this.data = data;
    }
}
```
```java
public class Test{
    private Comparable data;
    
    public Comparable getData(){
        return data;
    }
    
    public void setData(Comparable data){
        this.data = data;
    }
}
```
- bound type에 대해서는 `Object`가 아닌 한정시킨 타입으로 변환이 된다.  
그리고 세 번째 규칙이 있다. 세번째 규칙은 자바 컴파일러가 제네릭 타입 안정성을 위해 `bridge method`도 만들어낼 수 있다.

```java
    import java.util.Comparator;

public class MyComparator implements Comparator<Integer>{
    public int compare(Integer a, Integer b){
        //
    }
}
```

만약에 위와 같은 예제 코드가 있다고 가정했을 때, 위에서 말한대로 런타임에는 코드가 어떻게 변할까?

```java
public class MyComparator implements Comparator {
    public int compare (Integer a, Integer b){
        //
    }
    //This is a "bridge method"
    public int compare(Object a, Object b){
        return compare((Integer) a, (Integer)b);
    }
}
```
그러면 매개변수가 `Integer`타입의 compare메소드를 사용할 수 있게 된다.

- 제한된 Generic(제네릭)과 와일드카드
  - 지금까지는 제네릭의 가장 일반적인 예시들이었다. 예로 타입을 T라고 하고 외부클래스에서 `Integer`를 파라미터로 보내면 `T`는 `Integer`가 되고,
  `String`을 보내면 `T`는 `String`이 된다. 만약 당신이 `Student`라는 클래스를 만들었을 때 `T` 파라미터를 `Student`로 보내면 `T`는 `Student`가 된다.
  즉, 제네릭은 참조 타입 모두 될 수 있다.<br><br>
  만약 특정 범위 내로 좁혀서 제한하고 싶다면 어떻게 해야할까?<br><br><br>
  이 때 필요한 것이 extends와 super, 그리고 ?(물음표)이다.? 는 와일드 카드라고 해서 쉽게 말해 `알 수 없는 타입`이라는 의미다.<bR><br>
  - 아래 예시를 보면서 확인해보자면 이용할 때 크게 세가지 방식이 있다. 바로 super 키워드, extends 키워드 , 마지막으로 ? 하나만 오는 경우이다.
  ```java

  <K extends T> // T와 T의 자손 타입만 가능 K는 들어오는 타입으로 지정됨>
  <K super T > // T와 T의 부모(조상) 타입만 가능 (K는 들어오는 타입으로 지정됨)
  <? exntends T> // T와 T의 자손 타입만 가능
  <? super T> //T 와 T의 부모(조상)타입만 가능
  <?>         // 모든 타입 가능 . <? extends Object>랑 같은의미
  ```
  - <b>extends T:  상한경계<br>
  - ? super T :  하한경계<br>
  - <?> : 와일드 카드(Wild card)<br><br>
    이 때 주의해야 할 게 있다. `K extends T` 와 ? `extends T`는 비슷한 구조지만 차이점이 있다.<bR><br>
    '유형 경계를 지정'하는 것은 같으나 경계가 지정되고<b>K는 특정 타입으로 지정이 되지만 , ? 는 타입이 지정되지 않는다는 의미다.</b>
```java
/*
 * Number와 이를 상속하는 Integer, Short, Double, Long 등의 
 * 타입이 지정될 수 있으며, 객체 혹은 메서드를 호출 할 경우 K는
 * 지정된 타입으로 변환이 된다.
 * */ 
<K extends Number>
/*
 * Number와 이를 상속하는 Integer, Short, Double, Long등의 
 * 타입이 지정될 수 있으며, 객체 혹은 메서드를 호출 할 경우 지정 되는 타입이 없어
 * 타입 참조를 할 수는 없다.
 * */
< ? extends T> // T와 T의 자손 타입만 가능
```
위와 같은 차이가 있다, 그렇기 때문에 특정 타입의 데이터를 조작하고자 할 때는 K 같이 특정 제네릭 인수로 지정을 해주어야 한다.
일단 위 설명은 잠간 뒤로 하고 Extends 와 super 부터 하나하나 예를 들어보자.<br><br>
![img_1.png](img_1.png)

